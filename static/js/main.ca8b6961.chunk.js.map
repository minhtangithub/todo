{"version":3,"sources":["components/Chart.js","components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","props","className","chart","height","width","viewBox","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","TodoForm","onSubmit","e","handleSubmit","type","ref","inputRef","placeholder","value","input","onChange","handleChange","Todo","onDragEnd","result","handleDragEnd","droppableId","provided","droppableProps","innerRef","todos","map","todo","index","draggableId","String","id","checked","draggableProps","dragHandleProps","edit","text","onClick","editTodo","removeTodo","handleCheckChange","handleOnChangeEdit","saveTodo","Todolist","useState","undefined","localStorage","getItem","JSON","parse","setTodos","setInput","setChart","setEdit","useRef","saveToLocalStorage","newTodos","setItem","stringify","onChangeChart","countComplete","filter","length","newChart","Math","floor","useEffect","preventDefault","current","newID","random","newClassName","newTodo","Todos","focus","toast","success","error","target","source","destination","splice","draggedTodo","targetTodoText","todosCopy","forEach","item","App","TodoList","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAgBeA,MAff,SAAgBC,GACZ,OACI,sBAAKC,UAAU,QAAf,UACI,mDAAsBD,EAAME,MAA5B,QACA,sBAAKC,OAAO,KAAKC,MAAM,KAAKC,QAAQ,YAApC,UACA,wBAAQC,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKC,KAAK,UACpC,wBAAQH,EAAE,IAAIC,GAAG,KAAKC,GAAG,KAAKC,KAAK,QAC3BC,OAAO,OACPC,YAAY,KACZC,gBAAe,eAAWZ,EAAME,MAAjB,kCCSpBW,MAnBf,SAAkBb,GACd,OACI,uBAAMc,SAAU,SAACC,GAAD,OAAOf,EAAMgB,aAAaD,IAAId,UAAU,OAAxD,UACI,uBACIA,UAAU,QACVgB,KAAK,OACLC,IAAKlB,EAAMmB,SACXC,YAAa,eACbC,MAAOrB,EAAMsB,MACbC,SAAUvB,EAAMwB,eAEpB,wBACIV,SAAU,SAACC,GAAD,OAAOf,EAAMgB,aAAaD,IADxC,qB,qBC6DGU,MArEf,SAAezB,GACX,OACA,cAAC,IAAD,CAAiB0B,UAAa,SAACC,GAAD,OAAU3B,EAAM4B,cAAcD,IAA5D,SACA,cAAC,IAAD,CAAWE,YAAY,YAAvB,SACM,SAACC,GAAD,OACE,6CACI7B,UAAU,aACN6B,EAASC,gBAFjB,IAGIb,IAAKY,EAASE,SAHlB,UAKChC,EAAMiC,MAAMC,KACT,SAASC,EAAMC,GACX,OACA,cAAC,IAAD,CAAyBA,MAAOA,EAAOC,YAAaC,OAAOH,EAAKI,IAAhE,SACK,SAACT,GAAD,OACD,wDAEI7B,UAAYkC,EAAKK,QAAL,mBAAyBL,EAAKlC,UAA9B,6BAA4DkC,EAAKlC,YACzE6B,EAASW,gBACTX,EAASY,iBAJjB,IAKIxB,IAAKY,EAASE,SALlB,UAQsB,IAAdG,EAAKQ,KACT,qCACI,+BAAOR,EAAKS,OACZ,gCACI,sBACI3C,UAAU,YACV4C,QAAS,kBAAI7C,EAAM8C,SAASX,IAFhC,SAII,cAAC,IAAD,MAEJ,sBACIlC,UAAU,cACV4C,QAAS,kBAAI7C,EAAM+C,WAAWZ,IAFlC,SAGC,cAAC,IAAD,MACD,uBACIlB,KAAK,WACLuB,QAAWL,EAAKK,QAChBjB,SAAU,kBAAIvB,EAAMgD,kBAAkBb,YAKlD,qCACI,uBAAOd,MAAOrB,EAAM2C,KAAMpB,SAAY,SAACR,GAAD,OAAMf,EAAMiD,mBAAmBlC,MACrE,sBACId,UAAU,YACV4C,QAAS,kBAAI7C,EAAMkD,YAFvB,SAII,cAAC,IAAD,cAtCAf,EAAKI,OAgD5BT,EAASV,sBC2EP+B,MArIf,WACI,MAA0BC,wBAA2CC,GAAjCC,aAAaC,QAAQ,SAAyB,GAAKC,KAAKC,MAAMH,aAAaC,QAAQ,WAAvH,mBAAOtB,EAAP,KAAcyB,EAAd,KACA,EAA0BN,mBAAS,IAAnC,mBAAO9B,EAAP,KAAcqC,EAAd,KACA,EAA0BP,mBAAS,GAAnC,mBAAOlD,EAAP,KAAc0D,EAAd,KACA,EAAwBR,mBAAS,IAAjC,mBAAOT,EAAP,KAAakB,EAAb,KACM1C,EAAW2C,iBAAO,MAMxB,SAASC,EAAoBC,GACXV,aACRW,QAAQ,QAAST,KAAKU,UAAUF,IAO1C,SAASG,IACL,IAAMC,EAAgBnC,EAAMoC,QAAO,SAAClC,GAAD,OAAQA,EAAKK,WAAS8B,OACnDC,EAA6B,IAAjBtC,EAAMqC,OAAgB,EAAkB,IAAdF,EAAkBnC,EAAMqC,OACpEV,EAASY,KAAKC,MAAMF,IAiFxB,OAjGAG,qBAAU,WACNP,MACD,CAAClC,IAgGA,qCACI,yDACA,cAAC,EAAD,CACIjB,aA3EZ,SAAuBD,GAEnB,GADAA,EAAE4D,iBACGxD,EAASyD,QAAQvD,MAAtB,CAKAsC,EAAS,IACT,IAAMkB,EAAQL,KAAKC,MAAoB,IAAdD,KAAKM,UACxBC,EAAezC,OAAOuC,EAAM,GAC5BG,EAAU,CACZpC,KAAMzB,EAASyD,QAAQvD,MACvBmB,SAAS,EACTD,GAAIsC,EACJlC,MAAM,EACN1C,UAAW8E,GAGTf,EAAQ,sBAAO/B,GAAP,CAAc+C,IAC5BjB,EAAmBC,GACnBN,GAAS,SAAAuB,GAAK,OAAIjB,KAClB7C,EAASyD,QAAQM,QACjBC,IAAMC,QAAQ,0BAnBVD,IAAME,MAAM,wBAyERlE,SAAYA,EACZG,MAASA,EACTE,aA/FZ,SAAuBT,GACnB4C,EAAS5C,EAAEuE,OAAOjE,UAiGd,cAAC,EAAD,CACIY,MAASA,EACTL,cAnBZ,YAAgD,IAAvB2D,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,YAC7B,GAAKA,EAAL,CACA,MAAsBvD,EAAMwD,OAAOF,EAAOnD,MAAO,GAA1CsD,EAAP,oBACAzD,EAAMwD,OAAOD,EAAYpD,MAAO,EAAGsD,GACnChC,EAASzB,KAgBDa,SApDZ,SAAmBX,GACf,IAAIwD,EACEC,EAAY3D,EAClB2D,EAAUC,SAAQ,SAACC,GACXA,IAAS3D,IACTwD,EAAiBG,EAAKlD,KACtBkD,EAAKnD,MAAO,MAGpBoB,EAAmB6B,GACnB/B,EAAQ8B,GACRjC,EAASkC,IA0CD7C,WA5DZ,SAAqBZ,GACjB,IAAM6B,EAAQ,YAAO/B,EAAMoC,QAAO,SAACyB,GAAD,OAAWA,EAAKvD,KAAOJ,EAAKI,OAC9DwB,EAAmBC,GACnBN,EAASM,GACTmB,IAAMC,QAAQ,yBAyDNpC,kBA7FZ,SAA4Bb,GACxBF,EAAM4D,SAAQ,SAACC,GAAcA,IAAS3D,IAAO2D,EAAKtD,SAAWsD,EAAKtD,YAClEuB,EAAmB9B,GACnByB,EAASzB,GACTkC,KA0FQxB,KAAQA,EACRM,mBA5BZ,SAA6BlC,GACzB8C,EAAQ9C,EAAEuE,OAAOjE,QA4BT6B,SA3CZ,WACI,IAAM0C,EAAY3D,EAClB2D,EAAUC,SAAQ,SAACC,GACXA,EAAKnD,OACLmD,EAAKnD,MAAO,EACZmD,EAAKlD,KAAOD,MAGpBoB,EAAmB6B,GACnB/B,EAAQ,IACRH,EAASkC,GACTT,IAAMC,QAAQ,yBAmCV,cAAC,EAAD,CACIlF,MAASA,EACTD,UAAY,c,YC5Gb8F,MAnBf,WACE,OACE,sBAAK9F,UAAU,MAAf,UACE,cAAC+F,EAAD,IACA,cAAC,IAAD,CACEC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,QCPLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OAEF,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAIRC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca8b6961.chunk.js","sourcesContent":["\r\nfunction Chart (props) {\r\n    return (\r\n        <div className='chart'>\r\n            <h4>You've completed {props.chart}% </h4>\r\n            <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\">\r\n            <circle r=\"10\" cx=\"10\" cy=\"10\" fill=\"white\" />\r\n            <circle r=\"5\" cx=\"10\" cy=\"10\" fill=\"white\"\r\n                    stroke=\"gray\"\r\n                    strokeWidth=\"10\"\r\n                    strokeDasharray= {`calc(${props.chart} * 31.42 / 100) 31.42`} />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart","function TodoForm(props) {\r\n    return (\r\n        <form onSubmit={(e) => props.handleSubmit(e)} className='form'>\r\n            <input \r\n                className='input'\r\n                type='text'\r\n                ref={props.inputRef}\r\n                placeholder= 'Add new todo'\r\n                value={props.input}\r\n                onChange={props.handleChange}\r\n            />\r\n            <button\r\n                onSubmit={(e) => props.handleSubmit(e)}\r\n            >Add\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import {DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport {AiFillDelete, AiFillEdit, AiFillSave } from 'react-icons/ai'\r\n\r\nfunction Todo (props) {\r\n    return (\r\n    <DragDropContext onDragEnd = {(result)=>props.handleDragEnd(result) }>\r\n    <Droppable droppableId='todo_list'>\r\n        { (provided) =>   (\r\n            <ul \r\n                className='todo_list' \r\n                {...provided.droppableProps} \r\n                ref={provided.innerRef}\r\n            >\r\n            {props.todos.map(\r\n                function(todo, index) {\r\n                    return (\r\n                    <Draggable key={todo.id} index={index} draggableId={String(todo.id)}>\r\n                        {(provided) => (\r\n                        <li\r\n                            // key={index}\r\n                            className= {todo.checked?`todo todo${todo.className} check`:`todo todo${todo.className}`}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            ref={provided.innerRef}         \r\n                        >\r\n                            {\r\n                                todo.edit === false ?\r\n                            <>\r\n                                <span>{todo.text}</span>\r\n                                <div>\r\n                                    <span\r\n                                        className='edit-icon'\r\n                                        onClick={()=>props.editTodo(todo)}\r\n                                    >\r\n                                        <AiFillEdit></AiFillEdit>\r\n                                    </span>\r\n                                    <span\r\n                                        className='delete-icon'\r\n                                        onClick={()=>props.removeTodo(todo)}\r\n                                    ><AiFillDelete ></AiFillDelete></span>\r\n                                    <input \r\n                                        type='checkbox'\r\n                                        checked = {todo.checked}\r\n                                        onChange={()=>props.handleCheckChange(todo)}    \r\n                                    ></input>\r\n                                </div>\r\n                            </>\r\n                                    :\r\n                            <>\r\n                                <input value={props.edit} onChange = {(e) =>props.handleOnChangeEdit(e)}/> \r\n                                <span\r\n                                    className='save-icon'\r\n                                    onClick={()=>props.saveTodo()}\r\n                                >\r\n                                    <AiFillSave></AiFillSave>\r\n                                </span>\r\n                            </>\r\n                            }\r\n                    </li>\r\n                    )}\r\n                    </Draggable>\r\n                    )\r\n                }\r\n            )}\r\n            {provided.placeholder}            \r\n            </ul>\r\n        )}\r\n    </Droppable>\r\n    </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default Todo","import {useState, useEffect, useRef} from 'react'\r\nimport {toast} from 'react-toastify';\r\nimport Chart from './Chart'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction Todolist () {\r\n    const [todos, setTodos] = useState((localStorage.getItem('todos') == undefined) ? [] : JSON.parse(localStorage.getItem('todos')))\r\n    const [input, setInput] = useState('')\r\n    const [chart, setChart] = useState(0)\r\n    const [edit, setEdit] = useState('')\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        onChangeChart()\r\n    }, [todos])\r\n\r\n    function saveToLocalStorage (newTodos) {\r\n        const local = localStorage\r\n        local.setItem('todos', JSON.stringify(newTodos))\r\n    }\r\n\r\n    function handleChange (e) {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    function onChangeChart () {\r\n        const countComplete = todos.filter((todo)=>todo.checked).length\r\n        const newChart = (todos.length === 0) ? 0 : countComplete*100/todos.length\r\n        setChart(Math.floor(newChart))\r\n    }\r\n\r\n    function handleCheckChange (todo) {\r\n        todos.forEach((item) => {if (item === todo) {item.checked = !item.checked}} )\r\n        saveToLocalStorage(todos)\r\n        setTodos(todos)\r\n        onChangeChart()\r\n    }\r\n\r\n    function handleSubmit (e) {\r\n        e.preventDefault()\r\n        if (!inputRef.current.value) {\r\n            toast.error('Your todo is empty!')\r\n            return\r\n        }\r\n\r\n        setInput('')\r\n        const newID = Math.floor(Math.random()*100000)\r\n        const newClassName = String(newID%4)\r\n        const newTodo = {\r\n            text: inputRef.current.value,\r\n            checked: false,\r\n            id: newID,\r\n            edit: false,\r\n            className: newClassName\r\n        }\r\n\r\n        const newTodos = [...todos, newTodo]\r\n        saveToLocalStorage(newTodos)\r\n        setTodos(Todos => newTodos)\r\n        inputRef.current.focus()\r\n        toast.success('Add successfully!')\r\n    }\r\n\r\n    function removeTodo (todo) {\r\n        const newTodos = [...todos.filter((item) => (item.id !== todo.id) )]\r\n        saveToLocalStorage(newTodos)\r\n        setTodos(newTodos)\r\n        toast.success('Delete successfully!')\r\n    }\r\n\r\n    function editTodo (todo) {\r\n        let targetTodoText\r\n        const todosCopy = todos\r\n        todosCopy.forEach((item) => {\r\n            if (item === todo) {\r\n                targetTodoText = item.text\r\n                item.edit = true\r\n            }\r\n        })\r\n        saveToLocalStorage(todosCopy)\r\n        setEdit(targetTodoText)\r\n        setTodos(todosCopy)\r\n    }\r\n\r\n    function saveTodo () {\r\n        const todosCopy = todos\r\n        todosCopy.forEach((item) => {\r\n            if (item.edit) {\r\n                item.edit = false\r\n                item.text = edit\r\n            }\r\n        })\r\n        saveToLocalStorage(todosCopy)\r\n        setEdit('')\r\n        setTodos(todosCopy)\r\n        toast.success('Edit successfully!')\r\n    }\r\n\r\n    function handleOnChangeEdit (e) {\r\n        setEdit(e.target.value)\r\n    }\r\n\r\n    function handleDragEnd ({source, destination}) {\r\n        if (!destination) return\r\n        const [draggedTodo] = todos.splice(source.index, 1)\r\n        todos.splice(destination.index, 0, draggedTodo)\r\n        setTodos(todos)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>What's your plan today?</h1>\r\n            <TodoForm\r\n                handleSubmit = {handleSubmit}\r\n                inputRef = {inputRef}\r\n                input = {input}\r\n                handleChange = {handleChange}\r\n            >\r\n            </TodoForm>\r\n            <Todo\r\n                todos = {todos}\r\n                handleDragEnd = {handleDragEnd}\r\n                editTodo = {editTodo}\r\n                removeTodo = {removeTodo}\r\n                handleCheckChange = {handleCheckChange}\r\n                edit = {edit}\r\n                handleOnChangeEdit = {handleOnChangeEdit}\r\n                saveTodo = {saveTodo}\r\n            >\r\n            </Todo>\r\n            <Chart \r\n                chart = {chart}\r\n                className = 'chart'\r\n            ></Chart>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todolist","import TodoList from './components/TodoList'\nimport './App.css'; \n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (  \n    <div className=\"App\">\n      <TodoList />\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import BrowserRouter from 'react-router-dom/BrowserRouter'\n\nReactDOM.render(\n  // <BrowserRouter basename={process.env.PUBLIC_URL}>\n       <React.StrictMode>\n          <App />\n      </React.StrictMode>\n  //  </BrowserRouter>\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}